#!/bin/bash
set -u -e -C;
shopt -s nullglob;

function err { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }
function info { echo $'\e[36m'"$@"$'\e[m'; }

function ask_yN {
    local answer='';
    read -n 1 -s -p $'\e[34m'"$* [yN]"$'\e[m' answer;
    if test "${answer}" = y; then
        info yes;
        return 0;
    fi;
    info no;
    return 1;
}

function verbose {
    all=( "$@" )
    printf '%q' "$1"
    shift
    printf ' %q' "$@"
    printf '\n\n'
    "${all[@]}"
}

self='stefan.klinger@dlr.de'

if test "$#" = 0; then
    cat <<EOF

    encrypt RECIPIENTS... -- FILES...

Encrypting and decrypting documents
https://www.gnupg.org/gph/en/manual/x110.html

Exporting a public key
https://www.gnupg.org/gph/en/manual/x56.html

Useful commands:

    $ gpg --list-keys --keyid-format LONG | less -S

    $ gpg --list-sigs   # list keys and signatures

    $ gpg --armor --export '${self}' > '${TMP}/${self//[.@]/_}.asc'

Importing a public key

    $ gpg --import *.asc

EOF
    exit
fi;

rcpts=()
files=()
args=( "${@}" )

for (( i = 0; i < "${#args[@]}"; i++ )); do
    if test "${args[$i]}" = '--'; then
        rcpts=( "${args[@]:0:$i}" )
        files=( "${args[@]:$((i+1))}" )
        break
    fi;
done;

if test "${#files[@]}" -lt 1; then
    err 'Invalid usage.  Run without arguments for help.';
fi;


# allways add my self to the list
rcpts+=("${self}")

for file in "${files[@]}"; do
    info "Encrypting ${file}"
    verbose \
        gpg --encrypt \
        "${rcpts[@]/#/--recipient=}" \
        --output "${file}.gpg" \
        "${file}"
done
