#!/bin/bash
set -u -e -C
shopt -s nullglob

function err { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }
function info { echo $'\n\e[36m'"$@"$'\e[m'; }

function ask_yN {
    local answer=''
    read -n 1 -s -p $'\e[34m'"$* [yN]"$'\e[m' answer
    if test "${answer}" = y; then
        info yes
        return 0
    fi
    info no
    return 1
}

function listBlockDevices {
    info 'List block devices'
    lsblk -oname,size,type,mountpoint
    #info 'List device mappings of crypto type'
    #dmsetup ls --target crypt
}


if test "${1-}" = '-u'; then
    shift

    listBlockDevices

    info 'Close open LUKS device'

    map="${1-}"

    until test -h "/dev/mapper/${map}"; do
        if mountpoint "${map}" > /dev/null 2>&1; then
            map="$(findmnt -n -oSOURCE "${map}")"
            map="${map#/dev/mapper/}"
        else
            read -e -i "${map-}" -p 'close = ' map
        fi
    done

    if test "${map}"; then
        umount "/dev/mapper/${map}" || warn "Failed: umount /dev/mapper/${map}"
        cryptsetup close "$map" || warn "Failed: cryptsetup close ${map}"
        listBlockDevices
    else
        err "Does not exist: ${map}"
    fi

elif test "${1-}" = '-m'; then
    shift

    listBlockDevices

    info 'Open new LUKS device'

    dev="${1-}"
    until
        if test -z "${dev}"; then
            false
        else
            if cryptsetup isLuks "${dev}"; then
                true
            else
                warn "Not a LUKS device: $dev"
                false
            fi
        fi
    do
        read -e -i "${dev-}" -p 'device = ' dev
        test -z "${dev}" && exit
    done

    mnt="${2-}"
    until
        test -d "${mnt}"
    do
        read -e -i "${mnt-}" -p 'mountpoint = ' mnt
        if test -z "${mnt}"; then
            mnt="$(mktemp -t -d mnt.XXXXXXXXXXXXXXX)"
            warn "Created new ${mnt}"
        fi
    done

    map="$(blkid -ovalue -sUUID "${dev}")"

    keyfile="${3-}"
    until
        if test -z "${keyfile}"; then
            false
        elif test "${keyfile}" = -; then
            cryptsetup open "${dev}" "${map}" --type luks
        elif test -r "${keyfile}"; then
            cryptsetup open "${dev}" "${map}" --type luks \
                       --key-file "${keyfile}"
        else
            warn 'Pass keyfile or `-` for passphrase'
            false
        fi
    do
        read -e -i "${keyfile-}" -p 'keyfile = ' keyfile
    done || err 'Nothing opened'

    if
        if test "${4-}"; then
            mount -o "${4}" "/dev/mapper/${map}" "${mnt}";
        else
            mount "/dev/mapper/${map}" "${mnt}";
        fi
    then
        info "Success."
    else
        cryptsetup close "$map" || warn 'Failed: cryptsetup close'
        err 'Failed: mount'
    fi

    listBlockDevices

elif test "${1-}" = '--init'; then
    shift

    listBlockDevices

    warn 'Initialise new LUKS device'

    partition="${1-}"
    until
        if test -z "${partition}"; then
            false
        else
            if test -b "${partition}"; then
                true
            else
                warn "Not a block special device: ${partition}"
                false
            fi
        fi
    do
        read -e -i "${partition-}" -p 'partition = ' partition
        test -z "${partition}" && exit
    done

    mnt="${2-}"
    until
        test -d "${mnt}"
    do
        read -e -i "${mnt-}" -p 'mountpoint = ' mnt
        if test -z "${mnt}"; then
            mnt="$(mktemp -t -d mnt.XXXXXXXXXXXXXXX)"
            warn "Created new ${mnt}"
        fi
    done

    cryptsetup \
        --cipher aes-xts-plain --key-size 512 --verbose \
        luksFormat "${partition}"

    map="$(blkid -ovalue -sUUID "${partition}")"

    listBlockDevices

    cryptsetup open "${partition}" "${map}" --type luks

    mkfs.btrfs "/dev/mapper/${map}"

    mount "/dev/mapper/${map}" "${mnt}"

    listBlockDevices

else

    listBlockDevices

    info 'Synopsis'

    cat <<'.'
    luks -m [device [mountpoint [keyfile | -]]] [mountOptions]
    luks -u [mountpoint]
    luks --init [partition] [target]
.
fi
