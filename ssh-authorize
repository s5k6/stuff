#!/bin/bash
# Copyright 2019 Stefan Klinger <http://stefan-klinger.de>
set -u -e -C;
shopt -s nullglob;

function err { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }
function info { echo $'\e[36m'"$@"$'\e[m'; }

function ask_yN {
    local answer='';
    read -n 1 -s -p $'\e[34m'"$* [yN]"$'\e[m' answer;
    if test "${answer}" = y; then
        info yes;
        return 0;
    fi;
    info no;
    return 1;
}

sshdir="${HOME}/.ssh"
keylist="${sshdir}/ssh-authorize-list"

if test -z "${1-}"; then
    cat <<EOF
To copy all listed public keys into user@host:.ssh/authorized_keys,
and correctly set the remote permissions, use

    ssh-authorize [opts] user@host

Options are passed to the ssh command after transformation:

    -md5 â†¦ -oFingerprintHash=md5

List of keys in: ${keylist}
EOF
    exit;
fi;

sshArgs=()
while test "${1:0:1}" = '-'; do
    if test "${1}" = '-md5'; then
        sshArgs+=('-oFingerprintHash=md5');
        shift;
    else
        sshArgs+=("${1}");
        shift
    fi;
    test -z "${1-}" && err 'Missing: user@host';
done


if ! test -e "${keylist}"; then
    echo '# List of keys to be sent to hosts you want to conect to' > "${keylist}";
fi;

mapfile -t keys < <(sed -E 's/#.*//; /^\s*$/d' "${keylist}" | sort -u);

for i in "${!keys[@]}"; do
    f="${HOME}/.ssh/${keys[$i]}";
    if ! test -e "$f"; then
        warn "Ignore non-existing ${f}";
        unset "keys[${i}]";
        continue;
    fi;
    if test "${f/.pub}.pub" != "${f}"; then
        warn "Ignore non-.pub ${f}";
        unset "keys[${i}]";
    fi;
done

if test "${#keys[@]}" -lt 1; then
    err "No valid keys listed in ${keylist}";
fi;

printf '%s\n' "${keys[@]}"

( cd "${sshdir}"; cat "${keys[@]}" ) |
    ssh "${sshArgs[@]}" "${1}" \
        'mkdir -p .ssh; chmod 700 .ssh; cat >>.ssh/authorized_keys';

echo DONE;
