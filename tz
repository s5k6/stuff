#!/bin/bash

# tz --- leery tar and compressor frontend
# Copyright 2008 Stefan Klinger <http://stefan-klinger.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

set -u -e -C
shopt -s failglob nullglob

version='2023-Aug-30'



# Default compressor and extension
zip='zstd -9 --long=31 -T0'; ext='zst'



# Print error message and terminate with exit status 1.

function error { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }



# Prompt the user and wait for 'yes' or 'no'.

function askYesNo { # args: <Question string>
    while read -p $'\e[34m'"$* [yes/no] "$'\e[m' answer; do
        test "${answer}" = yes && return 0
        test "${answer}" = no && return 1
        echo -e 'Please type either "yes" or "no".'
    done
    error "Failed to read answer."
}



# Ask before overwriting a file and remove it if so.

function overwrite { # args: <filename>
    test -e "${1}" || return 0
    askYesNo "Overwrite ${1}" || return 1
    test -w "${1}" || error "Cannot write ${1}"
    rm -rf "${1}" || error "Unable to remove ${1}."
}



# Removes list of files, used by 'trap _ exit'

function cleanup { # args: <filename>*
    echo -e '\nExiting while processing; cleanup required!'
    echo "Leftovers: $*"
}



# Decompress an archive.

function doUnzipArch { # args: <source> <unzipper> <suffix> <rename>
    expect="$(basename "${1}" ".${3}")"
    if test "${4-}"; then
        out="${4}"
    else
        out="${expect}"
    fi

    echo "Unzip archive ${1}: ${out}"

    if overwrite "${out}"; then
        tmp="$(mktemp -d "${out}.XXXXXXXXXX")" || error "mktemp failed."
        trap "cleanup '${out}' '${tmp}'" exit
        echo "Extracting (tmp=${tmp})"
        if test "${2}" = 'unzip'; then
            unzip "${1}" -d "${tmp}" || error 'FAILED'
        elif test "${2}" = 'un7z'; then
            7z x -o"${tmp}" "${1}" || error "FAILED"
        else
            cat "${1}" | eval "${2}" | tar -k -C "${tmp}" -x || error ' FAILED'
        fi
        echo -n 'Policy checking...'
        found="$(ls -A "${tmp}" | head -n2)"  # get at most two files
        if test "${found}" = "${expect}"; then
            echo ' ok.'
            if ! mv "${tmp}/${expect}" "${out}"; then
                origMode="$(stat -c "%a" "${tmp}/${expect}")" \
                    || error "Could not determine file mode."
                chmod 700 "${tmp}/${expect}" || error "Could not chmod."
                mv "${tmp}/${expect}" "${out}" \
                    || error "Moving from ${tmp}/${expect} failed."
                chmod "${origMode}" "${out}" || error "Could not chmod."
            fi
            rm -rf "${tmp}" || error "Removing ${tmp} failed."
        else
            echo ' failed.'
            mv "${tmp}" "${out}" || error "Renaming ${tmp} failed."
            daisies+=("${out}")
        fi
        trap - exit
    else
        skip+=("${1}")
    fi
}



# Decompress a file.

function doUnzipFile { # args: <source> <unzipper> <suffix> <rename>
    if test "${4-}"; then
        out="${4}"
    else
        out="$(basename "${1}" ".${3}")"
    fi

    echo "Unzip file ${1}: ${out}"

    if overwrite "${out}"; then
        trap "cleanup '${out}'" exit
        echo "Extracting"
        cat "${1}" | eval "${2}" > "${out}" || error " FAILED"
        trap - exit
    else
        skip+=("${1}")
    fi
}



# Compress a file

function doZipFile { # args: <source> <zipper> <suffix> <rename>
    if test "${4-}"; then
        out="${4}.${3}"
    else
        out="${1}.${3}"
    fi
    echo "Compressing file ${1}: ${out}"
    if overwrite "${out}"; then
        trap "cleanup '${out}'" exit
        if test "${2}" = 'zip'; then
            zip "${out}" "${1}" || error 'FAILED'
        else
            cat "${1}" | eval "${2}" > "${out}" || error ' FAILED'
        fi
        trap - exit
    else
        skip+=("${1}")
    fi
}



# show help if no arguments given

if test -z "${1:-}"; then
  cat <<EOF

Name
====

\`tz\` — a leery frontend to tar, gzip, bzip2, lzma, xz, zstd and the
         odd one, zip.

Version ${version}


Synopsis
========

    tz                                  # this help, markdown format
    tz [-g|-b|-l|-x|-z|-s] ‹arg›...     # do work

Compress or extract the passed arguments using the right tools, while
not accidentally overwriting files or mixing archive contents.


Description
===========

Each argument is processed on its own, with the latest given options in
effect.

If ‹arg› starts with an equal sign \`=\`, then its remainder is used
to rename the target of the next (and only the next) file or directory
argument.  See "Renaming" below.

If ‹arg› is a directory, it is tar'ed and then compressed using either
gzip (-g), bzip2 (-b), lzma (-l), xz (-x) or zstd (-s), defaulting to
${zip}.  If -z is given, the directory is zipped, no tar involved.
All compression tasks following on the command line are affected by
choosing a compressor.

If ‹arg› is a file, the action taken is determined by its suffix:

  \`.tar.(xz|lzma|bz2|gz|zst)\` or \`.t(xz|lz|b2|bz|gz)\`
  ~   Extract the compressed tar archive, enforcing secure naming
      conventions (see "Security" below).

  \`.xz\`, \`.lzma\`, \`.bz2\`, \`.zst\` or \`.gz\`
  ~   Extract the file using the usual naming conventions, i.e.,
      \`foo.gz\` goes to \`foo\`.

  \`.zip\`, \`.7z\`
  ~   Extract the contents, enforcing secure naming conventions, figure
      out whether it was a file, a directory or a collection of items,
      and rearrange accordingly.

  Other files
  ~   are compressed using either gzip, bzip2, lzma, xz, zstd or zip,
      as choosen with aforementioned options.

In either case, the original file(s) will be left intact.  Output is
always in the current directory.  If the argument contains slashes,
the last component of the path is used to determine the name to be
created.


Security
========

\`tz\` is designed to ask you before overwriting any files.  If you
decide to overwrite any file or directory, the victim in question will
be removed first.  Hence, it is impossible to extract from an archive
into a directory while keeping the files therein.  This is an intended
feature, since it avoids mixing data from two archives and matches my
most common use case.

All archives are required to put their contents into a directory whose
name matches the name of the archive.  I.e., all the files in
\`foo.tar.bz2\` must belong to a top level directory \`foo\`.  To
enforce this, \`tz\` will, as an intermediate step, do all extracting
below a newly created temporary directory in your current path and
rearrange the contents later on, if safe to do so.  Otherwise, the
temporary directory is simply renamed to match the expected name.
This matches the recommendations for untrusted archives given in the
tar documentation.


Renaming
========

If a renaming argument, say \`=foo\`, identified by the leading equal
sign, precedes…

  * …an archive or a compressed file, then the result will be renamed
    to \`foo\`.  This does *not* bypass the security check, i.e., an
    archive \`bar.tgz\` must still contain a single member \`bar\`.

  * …a directory, then the root of the directory will be renamed to
    \`foo\` in the created tar archive, and the archive name will be
    \`foo\` followed by a suitable extension.

  * …an uncompressed file, then the compressed file will be named
    \`foo\` followed by a suitable extension.

Each renaming arguments only affects the next following source.


Bugs
====

There are probably some.  So use at your own risk.  For debugging
contact Stefan Klinger <http://stefan-klinger.de>.

EOF
    exit 0
fi



# List of targets that generated a warning.
daisies=()

# List of sources not processed on user intervention.
skip=()



if test -r "${HOME}/.tzrc"; then
    echo "Reading defaults from ~/.tzrc"
    source "${HOME}/.tzrc"
    test "${version}" = "${forVersion:-unknown}" \
        || error "Unsupported version in '~/.tzrc'"
fi


rename='' # name to use when renaming root component

while test "${1:-}"; do
    if test "${1:0:1}" = '-'; then
        case "${1}" in

            -b)
                echo "Using bzip2 for compression."
                zip='bzip2 -9'; ext='bz2'
                ;;

            -g)
                echo "Using gzip for compression."
                zip='gzip -9'; ext='gz'
                ;;

            -l)
                echo 'Using lzma for compression'
                zip='lzma -9'; ext='lzma'
                ;;

            -x)
                echo 'Using xz for compression'
                zip='xz -9'; ext='xz'
                ;;

            -s)
                echo 'Using zstd for compression'
                zip='zstd -9 --long=31 -T0'; ext='zst'
                ;;

            -z)
                echo 'Using zip for compression and archive generation'
                zip='zip'; ext='zip'
                ;;

            *)
                error "Do not understand argument '${1}'."
                ;;
        esac

    elif test "${1:0:1}" = '='; then
        rename="${1:1}"
        rename="${rename%/}" # rm trailing slash
        if test "${rename}" != "${rename%/*}"; then
            error "Renaming argument must not contain slash: ${rename}"
        fi
        if test "${rename}" = . -o "${rename}" = ..; then
            error "Invalid renaming argument: ${rename}"
        fi

    # compress directory
    elif test -d "${1}"; then
        if test "${zip}" = 'zip'; then
            out="$(basename "${1}").zip"
        elif test "${rename:-}"; then
            out="${rename}.tar.${ext}"
        else
            out="$(basename "${1}").tar.${ext}"
        fi

        echo "Compressing directory ${1}: ${out}"

        if overwrite "${out}"; then
            if test "${zip}" = 'zip'; then
                if test "${rename-}"; then
                    warn "Renaming root not supported for zip"
                    skip+=("${1}")
                else
                    trap "cleanup '${out}'" exit
                    zip -r "${out}" "${1}" || error "FAILED"
                    trap - exit
                fi
            else
                base="$(basename "${1}")"
                trap "cleanup '${out}'" exit
                if test "${rename-}"; then
                    tar -C "$(dirname "${1}")" -c "${base}" \
                        --transform 's/^'"${base}"'/'"${rename}"'/' \
                        | eval "${zip}" > "${out}" || error FAILED
                else
                    tar -C "$(dirname "${1}")" -c "${base}" \
                        | eval "${zip}" > "${out}" || error FAILED
                fi
                trap - exit
            fi
        else
            skip+=("${1}")
        fi

        rename='' # must be used only once

    # process file
    elif test -f "${1}"; then
        case "${1}" in

            ### extracting archives ###

            # extract and untar bzip2'ed tar archives
            *.tar.bz2)
                doUnzipArch "${1}" bunzip2 tar.bz2 "${rename-}"
                ;;
            *.tb2)
                doUnzipArch "${1}" bunzip2 tb2 "${rename-}"
                ;;
            *.tbz)
                doUnzipArch "${1}" bunzip2 tbz "${rename-}"
                ;;

            # extract and untar gzip'ed tar archives
            *.tar.gz)
                doUnzipArch "${1}" gunzip tar.gz "${rename-}"
                ;;
            *.tgz)
                doUnzipArch "${1}" gunzip tgz "${rename-}"
                ;;

            # extract and untar lzma'ed tar archives
            *.tar.lzma)
                doUnzipArch "${1}" unlzma tar.lzma "${rename-}"
                ;;
            *.tlz)
                doUnzipArch "${1}" unlzma tgz "${rename-}"
                ;;

            # extract and untar xz'ed tar archives
            *.tar.xz)
                doUnzipArch "${1}" unxz tar.xz "${rename-}"
                ;;
            *.txz)
                doUnzipArch "${1}" unxz txz "${rename-}"
                ;;

            # extract and untar zstd'ed tar archives
            *.tar.zst)
                doUnzipArch "${1}" 'unzstd --long=31' tar.zst "${rename-}"
                ;;

            # extract zip archives
            *.zip)
                doUnzipArch "${1}" unzip zip "${rename-}"
                ;;

            # extract 7zip archives
            *.7z)
                doUnzipArch "${1}" un7z 7z "${rename-}"
                ;;

            ### extract non-archive files ###

            *.bz2)
                doUnzipFile "${1}" bunzip2 bz2 "${rename-}"
                ;;

            *.gz)
                doUnzipFile "${1}" gunzip gz "${rename-}"
                ;;

            *.lzma)
                doUnzipFile "${1}" unlzma lzma "${rename-}"
                ;;

            *.xz)
                doUnzipFile "${1}" unxz xz "${rename-}"
                ;;

            *.zst)
                doUnzipFile "${1}" 'unzstd --long=31' zst "${rename-}"
                ;;

            ### compress other files ###

            *)
                doZipFile "${1}" "${zip}" "${ext}" "${rename-}"

        esac

        rename='' # must be used only once

    else
        error "No such file or directory: ${1}"

    fi
    shift
    echo
done

# Print a report.

if test "${#daisies[@]}" -gt 0; then
    warn 'Grouped some contents under new directory.  Avoid creating such archives!'
    echo "The delinquents: ${daisies[@]}"
fi

if test "${#skip[@]}" -gt 0; then
    warn 'Skipped some archives:'
    echo "${skip[@]}"
fi

exit 0
